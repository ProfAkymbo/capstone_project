version: 2.1

orbs: 
  slack: circleci/slack@4.12.1

defaults: 
  - &nodeImage
    docker:
        - image: cimg/node:13.8.0
  - &awsImage
    docker:
        - image: amazon/aws-cli
  - &ansibleImage
    docker:
        - image: cimg/python:3.11.2       
  - &terraformImage
    docker:
      - image: hashicorp/terraform:1.0.0

commands:
  
  install-aws:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            sudo apt install curl unzip -y
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  
  install-terraform:
    description: Install Terraform
    steps:
      - run:
          name: Install Terraform
          command: |
            sudo apt-get update -y && sudo apt-get install -y gnupg software-properties-common
            wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | \
            sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
            gpg --no-default-keyring \
            --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \
            --fingerprint
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
            https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
            sudo tee /etc/apt/sources.list.d/hashicorp.list
            sudo apt update -y && sudo apt install terraform -y
  
  install-ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible   
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  install-nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs

  trigger_slack_notification:
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

  notify_slack_error:
    description: "Send a message in Slack"
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1

  notify_slack_success:
    description: "Send a message in Slack"
    steps:
      - slack/notify:
          event: pass
          template: basic_success_1

  destroy-frontend-environment:
    description: Destroy front-end  
    steps:
      - run:
          name: Tear down frontend infrastructure
          when: on_fail
          command: |
            cd .circleci/files/frontend
            terraform init
            terraform destroy -auto-approve -var "ID=${CIRCLE_WORKFLOW_ID:0:7}"
    
  destroy-backend-environment:
    description: Destroy back-end.  
    steps:
      - run:
          name: Tear down backend infrastructure
          when: on_fail
          command: |
            cd .circleci/files/backend
            terraform init
            terraform destroy -auto-approve

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow-id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}      
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure "https://kvdb.io/$(echo $KEY_VALUE_DB)/migration_<<parameters.workflow-id>>")
            if [ "$SUCCESS" -eq 1 ]; 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
  
  clear-bucket:
    description: Clear s3 bucket.
    parameters:
      bucket-name:
        default: "udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm "s3://<< parameters.bucket-name>>" --recursive

jobs:
  build-frontend:
    <<: *nodeImage
    steps:
      # - trigger_slack_notification
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      # - notify_slack_success
      # - notify_slack_error

  build-backend:
    <<: *nodeImage
    steps:
      # - trigger_slack_notification
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      # - notify_slack_success
      # - notify_slack_error

  test-frontend:
    <<: *nodeImage
    steps:
      # - trigger_slack_notification
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
      # - notify_slack_success
      # - notify_slack_error
  
  test-backend:
    <<: *nodeImage
    steps:
      # - trigger_slack_notification
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
      # - notify_slack_success
      # - notify_slack_error

  scan-frontend:
    <<: *nodeImage
    steps:
      # - trigger_slack_notification
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan
      # - notify_slack_success
      # - notify_slack_error
    
  scan-backend:
    <<: *nodeImage
    steps:
      # - trigger_slack_notification
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan
      # - notify_slack_success
      # - notify_slack_error
  
  deploy-infrastructure:
    <<: *terraformImage
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            cd ~/project/.circleci/files/backend
            terraform init
            terraform apply -auto-approve
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            cd ~/project/.circleci/files/frontend
            terraform init
            terraform apply -auto-approve -var "ID=${CIRCLE_WORKFLOW_ID:0:7}"

  get-backend-instance-ip:
    <<: *awsImage
    steps:
      - checkout
      - run:
          name: Install tar and gzip 
          command: |
            yum update -y
            yum install -y gzip tar
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --filter Name="tag:Name",Values="backend-server" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
      
      - run:
          name: check inventory content
          command: cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      
  tear-down-infra:
    <<: *terraformImage
    steps:
      - checkout
      - run:
          name: Tear down backend infrastructure
          command: |
            cd .circleci/files/backend
            terraform init
            terraform destroy -auto-approve
      - run:
          name: Tear down frontend infrastructure
          command: |
            cd .circleci/files/frontend
            terraform init
            terraform destroy -auto-approve -var "ID=${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    <<: *ansibleImage
    steps:
      - checkout
      - install-aws
      - install-terraform
      - install-ansible
      - add_ssh_keys:
          fingerprints: ["42:55:77:e0:35:6a:c4:67:1f:dc:67:d2:3d:f5:a5:2f"]
      - attach_workspace:
          at: ~/
      - run:
          name: check inventory content
          command: cat ~/project/.circleci/ansible/inventory.txt

      - run:
          name: Install dependencies (openssh)
          command: |
            sudo apt-get install openssh-server
            # apk add --update openssh # Install openssh
      - run:
          name: Configure server
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-backend-environment
      - destroy-frontend-environment
      
  
  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install-aws
      - install-terraform
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys:
            - "backend-build"

      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save migrations results
            npm run migrations > migration_dump.txt
      - run:
          name: Send migration results to kdvb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/dump.txt   
            then
              curl --insecure https://kvdb.io/$(echo $KEY_VALUE_DB)/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      - revert-migrations
      - destroy-frontend-environment
      - destroy-backend-environment
  
      # - notify_slack_success
      # - notify_slack_error   
    

  deploy-frontend:
    <<: *nodeImage
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [frontend-build]
      - install-aws
      - install-ansible
      - install-terraform
      
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
            
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(tail -n 1 ~/project/.circleci/ansible/inventory.txt)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - revert-migrations
      - clear-bucket:
          bucket-name: "udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-frontend-environment
      - destroy-backend-environment  
  
  deploy-backend:
    <<: *nodeImage
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["42:55:77:e0:35:6a:c4:67:1f:dc:67:d2:3d:f5:a5:2f"]
      - attach_workspace:
          at: ~/
      - install-ansible
      - install-aws
      - install-terraform
      - run:
          name: Install dependencies (openssh)
          command: |
            sudo apt-get install openssh-server -y
      - run:
          name: Install dependencies
          command: |
            sudo apt update -y
            sudo apt install tar gzip -y
      - run:
          name: Copy backend to ansible files folder
          command: |
            mkdir ./.circleci/ansible/roles/deploy/files/
            cp -r ./backend ./.circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            echo "Content of the inventory file is :"
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml --ssh-common-args='-o StrictHostKeyChecking=no'
      - revert-migrations
      - clear-bucket:
          bucket-name: "udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-frontend-environment
      - destroy-backend-environment

  smoke-test:
    docker:
       - image: cimg/base:stable
    steps:
      - checkout
      - install-aws
      - install-nodejs
      - install-terraform
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export API_URL="http://$(tail -n 1 ~/project/.circleci/ansible/inventory.txt):3030"
            echo "${API_URL}"
      - run:
          name: Backend smoke test.
          command: |
            export API_URL="http://$(tail -n 1 ~/project/.circleci/ansible/inventory.txt):3030"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - revert-migrations
      - clear-bucket
      - destroy-frontend-environment
      - destroy-backend-environment
   

  cloudfront-update:
    <<: *nodeImage
    steps:
      - checkout
      - install-aws
      - install-terraform
      - attach_workspace:
          at: ~/
      - run:
          name: Update cloudfront distribution
          command: |  
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople


      - clear-bucket
      - revert-migrations
      - destroy-frontend-environment
      - destroy-backend-environment        

workflows:
  build:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend: 
          requires: 
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
  # default:
  #   jobs:
  #     - build-frontend
  #     - build-backend
  #     - test-frontend: 
  #         requires: 
  #           - build-frontend
  #     - test-backend:
  #         requires:
  #           - build-backend
  #     - scan-frontend:
  #         requires:
  #           - build-frontend
  #     - scan-backend:
  #         requires:
  #           - build-backend
  #     - deploy-infrastructure:
  #         requires:
  #           - test-frontend
  #           - test-backend
  #           - scan-frontend
  #           - scan-backend
  #         filters:
  #           branches:
  #             only: main
  #     - get-backend-instance-ip:
  #         requires:
  #           - deploy-infrastructure
  #         filters:
  #           branches:
  #             only: main

  #     - configure-infrastructure:
  #         requires: [deploy-infrastructure, get-backend-instance-ip]
  #     # - tear-down-infra:
  #     #     requires:
  #     #       - deploy-infrastructure
  #     #     filters:
  #     #       branches:
  #     #         only: main
  #     - run-migrations:
  #         requires: [configure-infrastructure]
  #     - deploy-frontend:
  #         requires: [run-migrations]
  #     - deploy-backend:
  #         requires: [run-migrations]
  #     - smoke-test:
  #         requires: [deploy-backend, deploy-frontend]
  #     - cloudfront-update:
  #         requires: [smoke-test]
  #     # - cleanup:
  #     #     requires: [cloudfront-update]